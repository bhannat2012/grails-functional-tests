<project name="grails-functional-test" default="functional-test">

	<!-- optional local properties -->
	<property file='local.properties'/>

	<property environment="env"/>
	<property name="checkoutDir" location="apps"/>

	<property name="newWebApp" value="myTestWebApp"/>
	<property name="target" value="target"/>
	<property name="default.port" value="8183"/>

	<path id="classpath">
		<fileset dir="lib" includes="*.jar"/>
	</path>

	<import file="./common/macros.xml" />

	<taskdef name="groovy" classname="org.codehaus.groovy.ant.Groovy" classpathref="classpath"/>

	<target name="init">
		<fail message="grails.home must be set with -Dgrails.home=&lt;grails installation directory&gt;" unless="grails.home"/>

		<condition property="grailsCmd" value="grails.bat" else="grails">
			<os family="windows"/>
		</condition>
		<property name="grailsCmd.absolute" location="${grails.home}/bin/${grailsCmd}"/>

	</target>

	<target name="functional-test"
			description="Runs functional tests for one or more test applications from SVN"
			depends="clean-reports,init">

		<mkdir dir="reports" />
		<antcall target="-functional-test-apps" />
		<antcall target="-functional-test-scripts" />
		<antcall target="run-cli" />
		<antcall target="-testsWithNewApp" />
		<antcall target="show-failures" />
	</target>

	<target name="run-test-scripts" depends="clean-reports,init">
		<antcall target="-functional-test-scripts" />
	</target>

	<target name="run-test-apps" depends="clean-reports,init">
		<antcall target="-functional-test-apps" />
	</target>

	<target name="show-failures">
		<groovy>
			def reportsDir = new File('reports')
			if (!reportsDir.exists()) {
				return
			}

			reportsDir.eachDir { dir ->
				def reportFile = new File("$dir/TESTS-TestSuites.xml")
				if (!reportFile.exists()) {
					return
				}

				def xml = new XmlSlurper().parse(reportFile)
				int errors = ([0] + xml.testsuite.@errors.collect { (it.text() ?: '0').toInteger() }).sum()
				if (errors) {
					println "$dir.name has $errors errors"
				}
				int failures = ([0] + xml.testsuite.@failures.collect { (it.text() ?: '0').toInteger() }).sum()
				if (failures > 0) {
					println "$dir.name has $failures failures"
				}
			}
		</groovy>
	</target>

	<target name="-functional-test-scripts" unless="skipScripts">
		<delete dir="target/scripts" failonerror="false" />
		<mkdir dir="target/scripts" />
		<groovy><![CDATA[
			String scriptName = ant.antProject.properties."test.script.name"
			def scriptFiles = new File("scripts").listFiles().findAll {
				it.name.endsWith('.xml')
			}
			println "Running functional test scripts"
			scriptFiles.each { file ->
				if (scriptName && !file.name.startsWith(scriptName)) {
					ant.echo message: "Skipping script: ${file.name}"
				} else {
					ant.ant(antfile:file, inheritRefs:true)
				}
			}
		]]></groovy>
	</target>

	<target name="-functional-test-apps" unless="skipApps">
		<groovy><![CDATA[
			try {
				def outcomes = []
				boolean failure = false
				int grailsInvocationCounter = 0
				new File('apps').eachDir { appDir ->

					properties.projectName = appDir.name

					// if the appToTest system property is set, then skip all other apps
					if (properties.appToTest && !properties.appToTest.equals(properties.projectName)) {
						ant.echo message: "Skipping app: ${properties.projectName}"
						return
					}

					String appName = ant.antProject.properties."test.app.name"
					if (appName && appName != appDir.name) return

					// Clear any existing functional test plugins.
					ant.echo message: "Delete existing functional test plugins"
					ant.delete(includeemptydirs: true) {
						fileset(dir: appDir.path, includes: "**/functional-test-*/**/*")
					}

					// First upgrade.
					ant.grails(command:"upgrade -force", projectName:properties.projectName, resultID:grailsInvocationCounter++)
					if (properties["testResult_${grailsInvocationCounter-1}"].toInteger() != 0) {
						outcomes << "Couldn't upgrade application ${properties.projectName}"
						failure = true
					}

					// Install the appropriate testing plugin, run the tests, and check the reportsDir
					if (new File(appDir, "test/functional").exists()) {
						if ((properties.projectName in ['gsp-reload-app'])) {
							// Workaround for GRAILS-8189
							ant.grails(command:'compile', projectName:properties.projectName, resultID:grailsInvocationCounter++)
						}

						if (!(properties.projectName in ['gsp-reload-app'])) {
							// Run the tests.
							ant.grails(command:"test-app", args: "functional: --dev-mode", environment:"dev", projectName:properties.projectName, resultID:grailsInvocationCounter++)
							outcomes << "Functional tests in application ${properties.projectName}: " +
										((properties["testResult_${grailsInvocationCounter-1}"].toInteger() != 0) ? "Failed" : "OK")

							if (properties["testResult_${grailsInvocationCounter-1}"].toInteger() != 0) {
								failure = true
							}

							// Copy reports
							ant.mkdir(dir:"reports/${properties.projectName}")
							ant.copy(todir:"reports/${properties.projectName}") {
								fileset(dir:"${properties.checkoutDir}/${properties.projectName}/target/test-reports")
							}
						}

						// Run the WAR tests.
						def grailsWarTestCmdArgs = [command:"test-app", args: "-war functional: --dev-mode", environment:"test", projectName:properties.projectName, resultID:grailsInvocationCounter++]
						if (properties.projectName in ['gsp-reload-app']) {
							grailsWarTestCmdArgs.args='functional: -war'
							grailsWarTestCmdArgs.environment='production'
						}
						ant.grails(grailsWarTestCmdArgs)
						outcomes << "Functional tests in application ${properties.projectName}: " +
									((properties["testResult_${grailsInvocationCounter-1}"].toInteger() != 0) ? "Failed" : "OK")

						if (properties["testResult_${grailsInvocationCounter-1}"].toInteger() != 0) {
							failure = true
						}

						// Copy reports
						ant.mkdir(dir:"reports/${properties.projectName}_war")
						ant.copy(todir:"reports/${properties.projectName}_war") {
							fileset(dir:"${properties.checkoutDir}/${properties.projectName}/target/test-reports")
						}
					}
					else {
						// Run unit & integration tests.
						ant.grails(command:"test-app", args: "", environment:"test", projectName:properties.projectName, resultID:grailsInvocationCounter++)
						outcomes << "Integration/unit tests in application ${properties.projectName}: " +
										((properties["testResult_${grailsInvocationCounter-1}"].toInteger() != 0) ? "Failed" : "OK")

						if (properties["testResult_${grailsInvocationCounter-1}"].toInteger() != 0) {
							failure = true
						}

						// Copy reports
						ant.mkdir(dir:"reports/${properties.projectName}")
						ant.copy(todir:"reports/${properties.projectName}") {
							fileset(dir:"${properties.checkoutDir}/${properties.projectName}/target/test-reports")
						}
					}
				}

				println "Grails Functional Test Results"
				println "======================================================"
				outcomes.each() {
					println it
				}

				if (failure) ant.fail(message:"At least one of the tests failed")
			}
			catch(Exception e) {
				println e.message
				e.printStackTrace()

				ant.fail(message:"functional tests failed due to error")
			}
			]]>
		</groovy>

	</target>

	<target name="-testsWithNewApp" unless="skipNewApp">
		<echo>Creating new Grails app ${newWebApp} and running some tests on it</echo>
		<property name="newWebApp.dir" value="${target}/${newWebApp}"/>
		<delete dir="${newWebApp.dir}"/>
			<mkdir dir="${target}"/>
			<grails projectName="${newWebApp}" command="create-app ${newWebApp}" dir="${target}" failonerror="true"/>
			<grails projectName="${newWebApp}" command="clean" dir="${newWebApp.dir}" failonerror="true"/>
			<grails projectName="${newWebApp}" command="compile" dir="${newWebApp.dir}" failonerror="true"/>
			<groovy>
			new File("${properties['newWebApp.dir']}/grails-app/domain/Blog.groovy").text = '''
class Blog {
	String title
}
'''
			</groovy>
			<grails projectName="${newWebApp}" command="generate-all blog" dir="${newWebApp.dir}" failonerror="true"/>

			<parallel>
				<daemons>
					<grails projectName="${newWebApp}" command="run-app" dir="${newWebApp.dir}" failonerror="true"/>
				</daemons>
				<sequential>
					<waitfor maxwait="2" maxwaitunit="minute" checkevery="500">
						<http url="http://localhost:${default.port}/${newWebApp}"/>
					</waitfor>
					<touch file="${newWebApp.dir}/.kill-run-app"/>
				</sequential>
			</parallel>
	</target>

	<target name="clean" depends="clean-reports">
		<delete dir="reports" failonerror="false"/>
		<delete dir="target" failonerror="false"/>
		<delete dir="work-global" failonerror="false"/>
		<delete dir="checkout" failonerror="false"/>
	</target>

	<target name="clean-reports">
		<delete dir="reports" failonerror="false"/>
	</target>

	<target name="run-cli" unless="skipCli">

		<property name='cli-classes' value='target/cli-classes' />
		<property name='grails.lib' value='${grails.home}/lib' />
		<property name="groovy.lib" value="${grails.lib}/org.codehaus.groovy/groovy-all/jars" />

		<delete dir="target" />
		<mkdir dir="${cli-classes}" />

		<taskdef name="groovyc" classname="org.codehaus.groovy.ant.Groovyc">
			<classpath>
				<fileset dir="${groovy.lib}" includes="*.jar"/>
			</classpath>
		</taskdef>

		<groovyc destdir="${cli-classes}" encoding="UTF-8" srcdir='cli-tests/src'>
			<classpath>
				<fileset dir="${groovy.lib}" includes="*.jar"/>
				<fileset dir="${grails.lib}/junit/junit/jars" includes="junit*.jar"/>

				<path refid="classpath"/>
			</classpath>

			<javac deprecation="on" debug="yes" source="1.5" target="1.5" />
		</groovyc>

 		<property file="${grails.home}/build.properties"/>
		<java classname="RunTests" fork="true" failonerror="true" maxmemory="256m" dir='cli-tests'>
			<classpath>
				<path refid="classpath"/>
				<fileset dir="${grails.lib}/junit/junit/jars" includes="junit*.jar"/>
				<pathelement location="${cli-classes}"/>
			</classpath>
			<sysproperty key='grails.home' value='${grails.home}'/>
			<sysproperty key='grails.version' value='${grails.version}'/>
			<sysproperty key='cli.target.dir' value='../target'/>
			<sysproperty key='cli.test.dir' value='.'/>
			<sysproperty key='cli.plugin.dir' value='../in-place-plugins'/>
		</java>

	</target>

</project>
