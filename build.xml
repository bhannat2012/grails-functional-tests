<project name="grails-functional-test" default="functional-test">
                                                                
    <property environment="env"/>
    <property name="checkoutDir" location="apps"/>
    <property name="app.checkout.url" value="http://svn.codehaus.org/grails/trunk/grails-functional-tests/apps/"/>
    <property name="grails.checkout.url" value="http://svn.codehaus.org/grails/trunk/grails/"/>
	
	<property name="newWebApp" value="myTestWebApp"/>
	<property name="target" value="target"/>

    <path id="classpath">
        <fileset dir="lib" includes="*.jar"/>
    </path>

    <import file="./common/macros.xml" />

    <taskdef name="svn" classname="org.tigris.subversion.svnant.SvnTask" classpathref="classpath"/>
    <taskdef name="groovy" classname="org.codehaus.groovy.ant.Groovy" classpathref="classpath"/>

    <target name="init">
        <!--
            If -Duse.grails.home is specified, GRAILS_HOME will be svn updated and used
            Else, if checkout/grails exists it will svn update unless -Dforce.checkout is set
            Else, grails will check out to checkout/grails and be used
        -->
        <groovy>
            if (properties['use.grails.home']) {
                ant.property(name:"grails.home", value:properties['env.GRAILS_HOME'])
                properties['dont.checkout.grails'] = "true"
            } else {
                ant.property(name:"grails.home", location:"checkout/grails")
                if (properties['force.checkout']) {
                    ant.delete(dir:properties['grails.home'], failonerror:"false")
                }
                if (new File(properties['grails.home']).exists()) {
                    properties['dont.checkout.grails'] = "true"
                }
            }
        </groovy>

		<condition property="grailsCmd" value="grails.bat" else="grails">
			<os family="windows"/>
		</condition>
		<property name="grailsCmd.absolute" location="${grails.home}/bin/${grailsCmd}"/>

    </target>



    <target name="-get-grails" depends="-checkout-grails,-update-grails"/>

    <target name="-checkout-grails" unless="dont.checkout.grails">
        <echo>Checking out Grails</echo>
        <property name="checked.out.grails" value="true"/>
        <delete dir="${grails.home}"/>
        <svn>
            <checkout url="${grails.checkout.url}" destPath="${grails.home}"/>
        </svn>
    </target>

    <target name="-update-grails" unless="checked.out.grails">
        <echo>Updating Grails</echo>
        <svn>
            <update dir="${grails.home}" />
        </svn>
    </target>

    <target name="-build-grails">
		<echo>GRAILS_HOME=${grails.home}</echo>

        <ant dir="${grails.home}" antfile="build.xml" target="jar">
            <property name="skipTests" value="true"/>
            <property name="skipExamples" value="true"/>
        </ant>
    </target>

    <target name="functional-test"
            description="Runs functional tests for one or more test applications from SVN"
            depends="clean-reports,init,-get-grails,-build-grails, -testsWithNewApp">

		<mkdir dir="reports" />
        <antcall target="-functional-test-apps" />
        <antcall target="-functional-test-scripts" />
    </target>

    <target name="run-test-scripts" depends="clean-reports,init">
        <antcall target="-functional-test-scripts" />
    </target>

    <target name="-functional-test-scripts">
         <delete dir="target/scripts" failonerror="false" />
         <mkdir dir="target/scripts" />
         <groovy>
             println "Running functional test scripts!"
             def scriptFiles = new File("scripts").listFiles().findAll { it.name.endsWith('.xml') }
             scriptFiles.each { file ->
                ant.ant(antfile:file, inheritRefs:true)
             }
         </groovy>
    </target>

    <target name="-functional-test-apps">
        <groovy><![CDATA[
			try {
		           def outcomes = []
		           def failure = false

		           // Collate the app names
		           def listPage = new URL(properties['app.checkout.url']).text
		           def appNames = []
		           listPage.eachMatch(/>(\w*)\/</) {
		               if (it[1] != "..") {
		                   appNames << it[1]
		                   println "Test will include application ${it[1]}"
		               }
		           }

		           def grailsInvocationCounter = 0

		           appNames.each() {

		               properties.projectName = it

                               def appDir = new File("${properties.checkoutDir}/${properties.projectName}")
		               if (appDir.exists()) {
		                   ant.antcall(target:"-update-app") {
		                       param(name:"projectName", value:properties.projectName)
		                   }
		               } else {
		                   ant.antcall(target:"-checkout-app") {
		                       param(name:"projectName", value:properties.projectName)
		                   }
		               }

                               // Clear any existing webtest plugin
                               ant.delete(includeEmptyDirs: true) {
                                   fileset(dir: appDir.path, includes: "plugins/*webtest*/**")
                               }

		               // First upgrade
		               ant.grails(command:"upgrade -force", projectName:properties.projectName, resultID:grailsInvocationCounter++)
		               if (properties["testResult_${grailsInvocationCounter-1}"].toInteger() != 0) {
		                   outcomes << "Couldn't upgrade application ${properties.projectName}"
		                   failure = true
		               }

		               // Install webtest
		               ant.grails(command:"install-plugin webtest", projectName:properties.projectName, resultID:grailsInvocationCounter++)
		               if (properties["testResult_${grailsInvocationCounter-1}"].toInteger() != 0) {
		                   outcomes << "Couldn't install webtest plugin into application ${properties.projectName}"
		                   failure = true
		               }

		               // Run webtest
		               ant.grails(command:"run-webtest", environment:"dev", projectName:properties.projectName, resultID:grailsInvocationCounter++)
		               outcomes << "Functional tests in application ${properties.projectName}: " +
		                   ((properties["testResult_${grailsInvocationCounter-1}"].toInteger() != 0) ? "Failed" : "OK")
		               if (properties["testResult_${grailsInvocationCounter-1}"].toInteger() != 0) {
		                   failure = true
		               }

					// Copy reports
					ant.mkdir(dir:"reports/${properties.projectName}")
					ant.copy(todir:"reports/${properties.projectName}") {
						fileset(dir:"${properties.checkoutDir}/${properties.projectName}/webtest/reports")
					}
		           }

		           println "Grails Functional Test Results"
		           println "======================================================"
		           outcomes.each() {
		               println it
		           }

		           if (failure) ant.fail(message:"At least one of the tests failed")

			}
			catch(Exception e) {
				println e.message
				e.printStackTrace()

				ant.fail(message:"functional tests failed due to error")
			}
            ]]>
        </groovy>

    </target>


    <target name="-testsWithNewApp">
        <echo>Creating new Grails app ${newWebApp} and running some tests on it</echo>
		<property name="newWebApp.dir" value="${target}/${newWebApp}"/>
        <delete dir="${newWebApp.dir}"/>
		<mkdir dir="${target}"/>
		<grails command="create-app ${newWebApp}" dir="${target}" failonerror="true"/>
		<grails command="clean" dir="${newWebApp.dir}" failonerror="true"/>
		<grails command="compile" dir="${newWebApp.dir}" failonerror="true"/>
		<grails command="generate-all blog" dir="${newWebApp.dir}" failonerror="true"/>

		<parallel>
			<daemons>
				<grails command="run-app" dir="${newWebApp.dir}" failonerror="true"/>
			</daemons>
			<sequential>
				<waitfor maxwait="1" maxwaitunit="minute" checkevery="500">
				    <http url="http://localhost:8083/${newWebApp}"/>
				</waitfor>
			</sequential>
		</parallel>
	</target>

	<target name="clean" depends="clean-reports">
        <delete failonerror="false">
			<fileset dir="${checkoutDir}">
				<include name="*" />
				<exclude name=".svn" />
			</fileset>
		</delete>
        <delete dir="checkout/grails" failonerror="false"/>
        <delete dir="reports" failonerror="false"/>
    </target>

	<target name="clean-reports">
		<delete dir="reports" failonerror="false"/>
	</target>

    <target name="-checkout-app">
        <echo>Checking out functional test application from :${app.checkout.url}${projectName}</echo>

        <antcall target="-checkout-app-head"/>
    </target>

    <target name="-update-app">
        <echo>Updating local copy of functional test application from :${app.checkout.url}${projectName}</echo>

        <antcall target="-update-app-head"/>
    </target>

    <target name="-checkout-app-head">
        <svn>
            <checkout url="${app.checkout.url}${projectName}" destPath="${checkoutDir}/${projectName}"/>
        </svn>
    </target>

    <target name="-update-app-head">
        <svn>
            <update dir="${checkoutDir}/${projectName}"/>
        </svn>
    </target>
</project>
